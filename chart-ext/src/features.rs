use super::actions::HelmChartActionEndpoint;
use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Serialize)]
#[serde(tag = "apiVersion", content = "spec")]
pub enum HelmChartFeatures {
    #[serde(rename = "platz.io/features/v1")]
    V1(HelmChartFeaturesV1),
}

impl Default for HelmChartFeatures {
    fn default() -> Self {
        Self::V1(Default::default())
    }
}

impl HelmChartFeatures {
    pub fn standard_ingress(&self) -> bool {
        match self {
            Self::V1(v1) => v1.standard_ingress,
        }
    }

    pub fn status(&self) -> Option<&HelmChartStatusFeature> {
        match self {
            Self::V1(v1) => v1.status.as_ref(),
        }
    }

    pub fn cardinality(&self) -> &HelmChartCardinality {
        match self {
            Self::V1(v1) => &v1.cardinality,
        }
    }

    pub fn reinstall_dependencies(&self) -> bool {
        match self {
            Self::V1(v1) => v1.reinstall_dependencies,
        }
    }

    pub fn node_selector_paths(&self) -> &Vec<Vec<String>> {
        match self {
            Self::V1(v1) => &v1.node_selector_paths,
        }
    }

    pub fn tolerations_paths(&self) -> &Vec<Vec<String>> {
        match self {
            Self::V1(v1) => &v1.tolerations_paths,
        }
    }
}

#[derive(Debug, Default, Deserialize, Serialize)]
pub struct HelmChartFeaturesV1 {
    /// When true, values.yaml is injected with an `ingress` section
    /// that matches the structure generated by `helm create`. This
    /// generates the hostname and sets TLS correctly.
    #[serde(default)]
    pub standard_ingress: bool,

    /// Sets an HTTP endpoint that returns a platz_sdk::PlatzStatus
    /// and displayed as part of the deployment page.
    pub status: Option<HelmChartStatusFeature>,

    /// Allow deploying OnePerCluster or Many.
    #[serde(default)]
    pub cardinality: HelmChartCardinality,

    /// Should dependent deployments be reinstalled when this deployment
    /// config/values are updated. This doesn't apply to renames or
    /// moving between clusters which always reinstalls dependencies.
    #[serde(default = "yes")]
    pub reinstall_dependencies: bool,

    /// Paths to inject the node selector to. Node selector is always
    /// added at the values top level `nodeSelector`.
    #[serde(default)]
    pub node_selector_paths: Vec<Vec<String>>,

    /// Same for tolerations
    #[serde(default)]
    pub tolerations_paths: Vec<Vec<String>>,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct HelmChartStatusFeature {
    pub endpoint: HelmChartActionEndpoint,
    pub path: String,
    pub refresh_interval_secs: u64,
}

#[derive(Debug, Deserialize, Serialize)]
pub enum HelmChartCardinality {
    Many,
    OnePerCluster,
}

impl Default for HelmChartCardinality {
    fn default() -> Self {
        Self::Many
    }
}

fn yes() -> bool {
    true
}
