use super::v0;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Default, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct ChartExtFeaturesV1Beta2 {
    pub api_version: crate::versions::V1Beta2,
    pub kind: crate::versions::Features,
    pub spec: ChartExtFeaturesSpec,
}

#[derive(Clone, Debug, Default, Deserialize, Serialize)]
pub struct ChartExtFeaturesSpec {
    /// When true, values.yaml is injected with an `ingress` section
    /// that matches the structure generated by `helm create`. This
    /// generates the hostname and sets TLS correctly.
    #[serde(default)]
    pub ingress: ChartExtIngress,

    /// Sets an HTTP endpoint that returns a platz_sdk::PlatzStatus
    /// and displayed as part of the deployment page.
    pub status: Option<v0::ChartExtStatusFeature>,

    /// Allow deploying OnePerCluster or Many.
    #[serde(default)]
    pub cardinality: v0::ChartExtCardinality,

    /// Should dependent deployments be reinstalled when this deployment
    /// config/values are updated. This doesn't apply to renames or
    /// moving between clusters which always reinstalls dependencies.
    #[serde(default = "yes")]
    pub reinstall_dependencies: bool,

    /// Paths to inject the node selector to. Node selector is always
    /// added at the values top level `nodeSelector`.
    #[serde(default)]
    pub node_selector_paths: Vec<Vec<String>>,

    /// Same for tolerations
    #[serde(default)]
    pub tolerations_paths: Vec<Vec<String>>,

    /// Control how the deployment is displayed
    #[serde(default)]
    pub display: ChartExtDeploymentDisplay,
}

#[derive(Clone, Debug, Default, Deserialize, Serialize)]
pub struct ChartExtIngress {
    pub enabled: bool,
    #[serde(default)]
    pub hostname_format: ChartExtIngressHostnameFormat,
}

fn yes() -> bool {
    true
}

impl From<bool> for ChartExtIngress {
    fn from(standard_ingress: bool) -> Self {
        Self {
            enabled: standard_ingress,
            hostname_format: Default::default(),
        }
    }
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum ChartExtIngressHostnameFormat {
    Name,
    KindAndName,
}

impl Default for ChartExtIngressHostnameFormat {
    fn default() -> Self {
        Self::KindAndName
    }
}

#[derive(Clone, Debug, Default, PartialEq, Eq, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChartExtDeploymentDisplay {
    pub name: Option<ChartExtDeploymentDisplayName>,
    pub icon: Option<ChartExtDeploymentDisplayIcon>,
}

#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub enum ChartExtDeploymentDisplayName {
    DeploymentName,
    InputField(ChartExtDeploymentDisplayNameInputField),
}

#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChartExtDeploymentDisplayNameInputField {
    pub name: String,
}

#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
#[serde(deny_unknown_fields)]
pub struct ChartExtDeploymentDisplayIcon {
    pub font_awesome: String,
}
