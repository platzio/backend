name: ⎈ Release Version

on:
  push:
    tags:
      - v**

env:
  DOCKER_REPO: platzio/backend

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v3

      - name: 📦 Install Cargo
        id: cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          components: clippy

      - name: 🪣 Cache cargo registry
        uses: actions/cache@v3
        with:
          key: ${{ steps.cargo.outputs.rustc }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ steps.cargo.outputs.rustc }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git

      - name: 🛠 Configure sccache
        uses: visvirial/sccache-action@v1
        with:
          cache-key: ${{ steps.cargo.outputs.rustc }}

      - name: 📎 Cargo clippy
        run: |
          cargo clippy --release -- -D warnings

      - name: 🔨 Cargo test
        run: |
          cargo test --release

  image:
    name: 🐳 Publish Image
    runs-on: ubuntu-latest
    needs:
      - test
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v3

      - name: 🗽 Free disk space
        uses: ShubhamTatvamasi/free-disk-space-action@master

      - name: 🏷 Get tag
        id: tag
        run: |
          echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: 🐳 Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          config: .github/buildkitd.toml

      - name: 🐳 Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: BASE_IMAGE=platzio/base:v5
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_REPO }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs:
      - image
    steps:
      - name: 🏗️ Generate OpenAPI schema
        run: |
          docker run --rm \
            ${{ env.DOCKER_REPO }}:${{ needs.image.outputs.tag }} \
            /root/platz-api openapi schema \
            > openapi.yaml

      - name: ✨ Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          tag_name: ${{ needs.image.outputs.tag }}
          release_name: ${{ needs.image.outputs.tag }}

      - name: 📦 Upload OpenAPI schema
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: openapi.yaml
          asset_name: openapi.yaml
          asset_content_type: application/vnd.oai.openapi

      - name: 🚀 Publish release
        uses: StuYarrow/publish-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ steps.create_release.outputs.id }}
